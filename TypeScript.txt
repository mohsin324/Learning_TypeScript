npm i -g typescript
tsc --version
tsc --init
tsc index.js

7 primitive data types
objects are fundamental data types > objects is the type of all non-primitive types

string
number
Boolean
bigint
undefined
null
symbol

// explicitly
type MohsinType = {
    name: { firstName: string, lastName: string},
    age: number,
    teaching: boolean,
    dob: Date,
    certification: string[]
}
===============================
how to use private variales in constructor
video 6
OOP
1. overriding
2. property overriding
3. getter/setter
4. access modifiers => public, protected, private
5. OOP Pilars
6. optional parameters
7. methods
8. methods overriding
9. overwritten constructors
conclusion of OOP
abstraction > organize data > irrelevant data hiding
encapsulation > keep protected data
inheritance > parent to child
polymorphism > same method/function different instances mai different behavior karta > Traffic rules

================================================================
Functions
> required parameters
> optional parameters
> default parameters

==================================== Interfaces Vs Type
boths are using for objects structure but Interfaces can be redeclared and merged but Types can't
type Human = {
    name: string;
    age: number
}
let Imran: Human = {
    name: "Imaran",
    age: 25
}
interface Human2 {
    name: string;
    age: number
}
let Imran2: Human2 = {
    name: "Imaran",
    age: 25,
    occupation: "Software Engineer"
}

interface Human2 {
    occupation: string
}

=================
Inference in TypeScript 🔍
Inference in TypeScript means that the TypeScript compiler can automatically determine the type of a variable without explicitly specifying it.
================= Union Types











🚀 REST API Interview Questions 🚀

REST APIs are the backbone of modern web and mobile applications, enabling seamless communication between services. If you're preparing for an interview or looking to enhance your REST API knowledge, here’s a list of essential REST API interview topics covering:

✅ Core Concepts (RESTful principles, HTTP methods, statelessness)
✅ API Design Best Practices (HATEOAS, versioning, pagination)
✅ Request & Response Handling (@RequestBody, @ResponseEntity, status codes)
✅ Error Handling & Validation (@ExceptionHandler, @Valid, global error handling)
✅ Authentication & Security (OAuth2, JWT, API keys, HTTPS)
✅ CORS & Rate Limiting (Cross-Origin Resource Sharing, API throttling)
✅ Testing & Documentation (Postman, Swagger/OpenAPI, Spring REST Docs)
✅ Performance Optimization (Caching, GZip compression, async processing)
✅ Monitoring & Logging (Spring Boot Actuator, ELK Stack, Prometheus)

💡 Want the full list of REST API interview questions? Comment "REST API" below, and I’ll share it with you! Let’s learn and grow together.
================================================
>	Number
>	String
> 	Boolean
>	Null
> 	Undefined
>	Void
>	Object
>	Array
> 	Tuples